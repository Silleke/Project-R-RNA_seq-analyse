set_wd()
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
library(edgeR) # for DGEList
library(limma)
library(RColorBrewer)
library(mixOmics)
library(HTSFilter)
install install.packages(HTSFilter)
install install.packages(HTSFilter)
install install.package(HTSFilter)
install.package(HTSFilter)
install.packages(HTSFilter)
# install.packages("HTSFilter")
install.packages("HTSFilter")
biocLite("HTSFilter")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
library(edgeR) # for DGEList
library(limma)
library(RColorBrewer)
library(mixOmics)
library(HTSFilter)
install.packages("HTSFilter")
library(edgeR) # for DGEList
library(limma)
library(RColorBrewer)
library(mixOmics)
library(HTSFilter)
install.packages("edgeR")
biocLite("readGFF")
source("https://bioconductor.org/biocLite.R")
biocLite("rtracklayer")
biocLite("readGFF")
source("https://bioconductor.org/biocLite.R") # install bioconductor if not already installed
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
biocLite("HTSFilter")
installpkg("affy")
installpkg <- function(pkg) {
if (!require(pkg, character.only = T)) {
source("http://bioconductor.org/biocLite.R")
biocLite(pkg)
} else {
require(pkg, character.only = T)
}
}
installpkg("golubEsets")
biocLite("gage")
browseVignettes("gage")
filename=system.file("extdata/gse16873.demo", package = "gage")
demo.data=readExpData(filename, row.names=1)
head(demo.data)
filename=system.file("RNA_Seq_counts.txt", package = "gage")
demo.data=readExpData(filename, row.names=1)
head(demo.data)
library(gage)
# biocLite("gage")
browseVignettes("gage")
library(gage)
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
browseVignettes("GSEABase")
browseVignettes("GSEABase")
source("https://bioconductor.org/biocLite.R") # install bioconductor if not already installed
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
biocLite("HTSFilter")
source("https://bioconductor.org/biocLite.R") # install bioconductor if not already installed
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
source("https://bioconductor.org/biocLite.R") # install bioconductor if not already installed
library(mixOmics)
biocLite("HTSFilter")
WCFS1_anno <- read.delim(file="C:/Users/xx_xx/Downloads/WCFS1_anno1.txt", header=TRUE, sep="\t")
WCFS1_anno <- read.delim(file="C:/Users/Beheerder/Google Drive/Bio-informatica leerjaar 3/Blok 11/Project R/WCFS1_anno.txt", header=TRUE, sep="\t")
RNA <- read.delim(file="C:/Users/Beheerder/Google Drive/Bio-informatica leerjaar 3/Blok 11/Project R/RNA-Seq-counts.txt", header=TRUE, sep="\t")
RNA <- read.delim(file="C:/Users/Beheerder/Google Drive/Bio-informatica leerjaar 3/Blok 11/Project R/RNA_Seq_counts.txt", header=TRUE, sep="\t")
merged_data <- merge(RNA, WCFS1_anno, by.x=("ID"), by.y=("ORF"))
merged_data <- merged_data[1:(length(merged_data)-4)]
#counts
fDir <-  "C:/Users/xx_xx/Downloads/"
fName <- "WCFS1_anno.txt"
cnts <- read.delim(paste0(fDir,fName))
row.names(merged_data) <- merged_data[,"ID"]
fDir <-  "C:/Users/Beheerder/Google Drive/Bio-informatica leerjaar 3/Blok 11/Project R/"
fName <- "WCFS1_anno.txt"
cnts <- read.delim(paste0(fDir,fName))
row.names(merged_data) <- merged_data[,"ID"]
exp_WCFS1 <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib")
exp_NC8 <- c("NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")
group_WCFS1 <- factor(exp_WCFS1)
group_NC8 <-factor(exp_NC8)
y_WCFS1 <- DGEList(counts=merged_data[,2:5],group=group_WCFS1)
y_NC8 <- DGEList(counts=merged_data[,6:9],group=group_NC8)
keep.genes_WCFS1 <- rowSums(cpm(y_WCFS1)>50) >= 2
keep.genes_NC8 <- rowSums(cpm(y_NC8)>50) >= 2
y_NC8 <- y_NC8[keep.genes_NC8,]
y_WCFS1 <- y_WCFS1[keep.genes_WCFS1,]
y_NC8$samples$lib.size <- colSums(y_NC8$counts)
y_WCFS1$samples$lib.size <- colSums(y_WCFS1$counts)
y_NC8 <- calcNormFactors(y_NC8, method="TMM" )
y_WCFS1 <- calcNormFactors(y_WCFS1, method="TMM" )
print("Count statistics NC8")
print(summary(y_NC8$counts))
print(y_NC8$samples)
print("Count statistics WCFS1")
print(summary(y_WCFS1$counts))
print(y_WCFS1$samples)
design_NC8 <- model.matrix(~0+group, data=y_NC8$samples)
colnames(design_NC8) <- levels(y_NC8$samples$group)
print(design_NC8)
design_WCFS1 <- model.matrix(~0+group, data=y_WCFS1$samples)
colnames(design_WCFS1) <- levels(y_WCFS1$samples$group)
print(design_WCFS1)
y_NC8 <- estimateGLMCommonDisp(y_NC8,design_NC8)
y_NC8 <- estimateGLMTrendedDisp(y_NC8,design_NC8, method="power")
y_NC8 <- estimateGLMTagwiseDisp(y_NC8,design_NC8)
y_WCFS1 <- estimateGLMCommonDisp(y_WCFS1,design_WCFS1)
y_WCFS1 <- estimateGLMTrendedDisp(y_WCFS1,design_WCFS1, method="power")
y_WCFS1 <- estimateGLMTagwiseDisp(y_WCFS1,design_WCFS1)
pdf(paste0(fDir,"LP_edgeR.pdf"))
plotMDS(y_NC8)
plotBCV(y_NC8)
plotMDS(y_WCFS1)
plotBCV(y_WCFS1)
dev.off()
fit_NC8 <- glmFit(y_NC8,design_NC8)
fit_WCFS1 <- glmFit(y_WCFS1,design_WCFS1)
mc_NC8 <- makeContrasts(exp.r=NC8.glc-NC8.rib, levels=design_NC8)
mc_WCFS1 <- makeContrasts(exp.r=WCFS1.glc-WCFS1.rib, levels=design_WCFS1)
fit_NC8 <- glmLRT(fit_NC8, contrast=mc_NC8)
fit_WCFS1 <- glmLRT(fit_WCFS1, contrast=mc_WCFS1)
res_NC8<-topTags(fit_NC8)
print(res_NC8)
res_WCFS1<-topTags(fit_WCFS1)
print(res_WCFS1)
write.csv(res_NC8, file = "res_NC8.csv")
read.csv("res_NC8.csv", row.names = 1)
write.csv(res_WCFS1, file = "res_WCFS1.csv")
read.csv("res_WCFS1.csv", row.names = 1)
write.csv(fit_NC8[["table"]], file = "all_NC8.csv")
#read.csv("all_NC8.csv", row.names = 1)
write.csv(fit_WCFS1[["table"]], file = "all_WCFS1.csv")
#read.csv("all_WCFS1.csv", row.names = 1)
mc_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels=design_NC8)
mc_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels=design_WCFS1)
fit_NC8 <- glmLRT(fit_NC8, contrast=mc_NC8)
fit_WCFS1 <- glmLRT(fit_WCFS1, contrast=mc_WCFS1)
mc_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels=design_NC8)
mc_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels=design_WCFS1)
fit_NC8 <- glmLRT(fit_NC8, contrast=mc_NC8)
fit_WCFS1 <- glmLRT(fit_WCFS1, contrast=mc_WCFS1)
fit_NC8 <- glmLRT(fit_NC8, contrast=mc_NC8)
fit_WCFS1 <- glmLRT(fit_WCFS1, contrast=mc_WCFS1)
res_NC8<-topTags(fit_NC8)
print(res_NC8)
res_WCFS1<-topTags(fit_WCFS1)
print(res_WCFS1)
write.csv(res_NC8, file = "res_NC8.csv")
read.csv("res_NC8.csv", row.names = 1)
write.csv(res_WCFS1, file = "res_WCFS1.csv")
read.csv("res_WCFS1.csv", row.names = 1)
write.csv(fit_NC8[["table"]], file = "all_NC8.csv")
#read.csv("all_NC8.csv", row.names = 1)
write.csv(fit_WCFS1[["table"]], file = "all_WCFS1.csv")
#read.csv("all_WCFS1.csv", row.names = 1)
mc_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels=design_NC8)
mc_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels=design_WCFS1)
fit_NC8 <- glmLRT(fit_NC8, contrast=mc_NC8)
fit_WCFS1 <- glmLRT(fit_WCFS1, contrast=mc_WCFS1)
res_NC8<-topTags(fit_NC8)
print(res_NC8)
res_WCFS1<-topTags(fit_WCFS1)
print(res_WCFS1)
write.csv(res_NC8, file = "res_NC8rib_glc.csv")
read.csv("res_NC8.csv", row.names = 1)
write.csv(res_WCFS1, file = "res_WCFS1rib_glc.csv")
read.csv("res_WCFS1.csv", row.names = 1)
write.csv(fit_NC8[["table"]], file = "all_NC8rib_glc.csv")
#read.csv("all_NC8rib-glc.csv", row.names = 1)
write.csv(fit_WCFS1[["table"]], file = "all_WCFS1rib_glc.csv")
#read.csv("all_WCFS1rib-glc.csv", row.names = 1)
# run this if it's your first time using it to install
# install.packages(c("RColorBrewer", "mixOmics", "VennDiagram", "gplots", "stringi", "rstudioapi"))
# source("https://bioconductor.org/biocLite.R") # install bioconductor if not already installed
# biocLite("HTSFilter")
# biocLite("DBI")
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
library(DBI)
library(HTSFilter)
library(mixOmics)
#############Create a function set_wd that sets the working directory##############
set_wd <- function() {
# load rstudioapi # make sure you have it installed
library(rstudioapi)
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print( getwd() )
}
# Execute set_wd
set_wd()
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
library(DBI)
library(HTSFilter)
library(mixOmics)
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
library(DBI)
library(HTSFilter)
library(mixOmics)
install.packages(c("RColorBrewer", "mixOmics", "VennDiagram", "gplots", "stringi", "rstudioapi"))
source("https://bioconductor.org/biocLite.R") # install bioconductor if not already installed
biocLite("HTSFilter")
biocLite("DBI")
install.packages(c("RColorBrewer", "mixOmics", "VennDiagram", "gplots", "stringi", "rstudioapi"))
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
library(DBI)
library(HTSFilter)
library(mixOmics)
#############Create a function set_wd that sets the working directory##############
set_wd <- function() {
# load rstudioapi # make sure you have it installed
library(rstudioapi)
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print( getwd() )
}
# Execute set_wd
set_wd()
################################Data#######################################
# Importing the files
# data <- read.delim(file.choose(), header=T)
# Make sure the files are on the scripts location.
WCFS1_anno <- read.delim("WCFS1_anno.txt", header=T, sep="\t")
RNA_Seq_counts <- read.delim("RNA_Seq_counts.txt", header=T, sep="\t")
# Have a look at the count data:
head(RNA_Seq_counts)
nrow(RNA_Seq_counts)
# merge the data
merged_data = merge(RNA_Seq_counts, WCFS1_anno, by.x="ID", by.y="ORF")
# remove NA values
merged_data <- merged_data[1:(length(merged_data)-4)]
#
row.names(merged_data) <- merged_data[,"ID"]
#############################Starting from count table##############################
# create DGEList
exp_WCFS1 <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib")
exp_NC8 <- c("NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")
group_WCFS1 <- factor(exp_WCFS1)
group_NC8 <-factor(exp_NC8)
y_WCFS1 <- DGEList(counts=merged_data[,2:5],group=group_WCFS1)
y_NC8 <- DGEList(counts=merged_data[,6:9],group=group_NC8)
# merged_data <- merge(RNA, WCFS1_anno, by.x=("ID"), by.y=("ORF"))
#
# merged_data <- merged_data[1:(length(merged_data)-4)]
#
# row.names(merged_data) <- merged_data[,"ID"]
# #counts
# fDir <-  "C:/Users/Beheerder/Google Drive/Bio-informatica leerjaar 3/Blok 11/Project R/"
# fName <- "WCFS1_anno.txt"
#
# cnts <- read.delim(paste0(fDir,fName))
# row.names(merged_data) <- merged_data[,"ID"]
#
# #DGE list
# exp_WCFS1 <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib")
# exp_NC8 <- c("NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")
# group_WCFS1 <- factor(exp_WCFS1)
# group_NC8 <-factor(exp_NC8)
#
# y_WCFS1 <- DGEList(counts=merged_data[,2:5],group=group_WCFS1)
# y_NC8 <- DGEList(counts=merged_data[,6:9],group=group_NC8)
#######################Data exploration and quality assessment######################
# Extract RNA_Seq_Counts
RNASeqCounts_WCFS1 <- log2(y_WCFS1$counts+1)
RNASeqCounts_NC8 <- log2(y_NC8$counts+1)
head(RNASeqCounts_WCFS1)
head(RNASeqCounts_NC8)
# Set the graphical parameters
par(mfrow=c(2,2))
# Create histogram for Counts # lijkt ongeveer normaal verdeeld, counts tegenover sample
# Note that these are plots before normalisation, for data exploration and quality assesment.
hist(RNASeqCounts_WCFS1[,"WCFS1.glc.1"])
hist(RNASeqCounts_WCFS1[,"WCFS1.glc.2"])
hist(RNASeqCounts_WCFS1[,"WCFS1.rib.1"])
hist(RNASeqCounts_WCFS1[,"WCFS1.rib.2"])
hist(RNASeqCounts_NC8[,"NC8.glc.1"])
hist(RNASeqCounts_NC8[,"NC8.glc.2"])
hist(RNASeqCounts_NC8[,"NC8.rib.1"])
hist(RNASeqCounts_NC8[,"NC8.rib.2"])
# Create boxplot for Counts
# Note that these are plots before normalisation, for data exploration and quality assesment.
boxplot(RNASeqCounts_WCFS1, col="gray", las=3, main="RNASeqCounts_WCFS1")
boxplot(RNASeqCounts_NC8, col="gray", las=3, main="RNASeqCounts_NC8")
# Create MA plot for Counts
# M values
## WCFS1.glc.1 vs WCFS1.glc.2
M_values_WCFS1_glc <- (RNASeqCounts_WCFS1[,1] - RNASeqCounts_WCFS1[,2])
## WCFS1.rib.1 vs WCFS1.rib.2
M_values_WCFS1_rib <- (RNASeqCounts_WCFS1[,3] - RNASeqCounts_WCFS1[,4])
## NC8.glc.1 vs NC8.glc.2
M_values_NC8_glc <- (RNASeqCounts_NC8[,1] - RNASeqCounts_NC8[,2])
## NC8.rib.1 vs NC8.rib.2
M_values_NC8_rib <- (RNASeqCounts_NC8[,3] - RNASeqCounts_NC8[,4])
# A values
## WCFS1.glc.1 vs WCFS1.glc.2
A_values_WCFS1_glc <- (RNASeqCounts_WCFS1[,1] + RNASeqCounts_WCFS1[,2])/2
## WCFS1.rib.1 vs WCFS1.rib.2
A_values_WCFS1_rib <- (RNASeqCounts_WCFS1[,3] + RNASeqCounts_WCFS1[,4])/2
## NC8.glc.1 vs NC8.glc.2
A_values_NC8_glc <- (RNASeqCounts_NC8[,1] + RNASeqCounts_NC8[,2])/2
## NC8.rib.1 vs NC8.rib.2
A_values_NC8_rib <- (RNASeqCounts_NC8[,3] + RNASeqCounts_NC8[,4])/2
# plot MA
# Note that these are plots before normalisation, for data exploration and quality assesment.
plot(A_values_WCFS1_glc, M_values_WCFS1_glc, xlab="A", ylab="M", pch=19, main="WCFS1_glc treated")
abline(h=0, col="red")
plot(A_values_NC8_glc, M_values_NC8_glc, xlab="A", ylab="M", pch=19, main="NC8_glc treated")
abline(h=0, col="red")
plot(A_values_WCFS1_rib, M_values_WCFS1_rib, xlab="A", ylab="M", pch=19, main="WCFS1_rib treated")
abline(h=0, col="red")
plot(A_values_NC8_rib, M_values_NC8_rib, xlab="A", ylab="M", pch=19, main="NC8_rib treated")
abline(h=0, col="red")
# MDS for Counts (using limma package) # soort PCA
# Note that these are plots before normalisation, for data exploration and quality assesment.
par(mfrow=c(1,2))
plotMDS(RNASeqCounts_WCFS1, main="RNASeqCounts_WCFS1")
plotMDS(RNASeqCounts_NC8, main="RNASeqCounts_NC8")
# heatmap for Counts (using mixOmics package)
# Note that these are plots before normalisation, for data exploration and quality assesment.
sampleDists_WCFS1 <- as.matrix(dist(t(RNASeqCounts_WCFS1)))
sampleDists_NC8 <- as.matrix(dist(t(RNASeqCounts_NC8)))
Color <- colorRampPalette(c("Yellow", "orange")) #set color
heatmap.2(sampleDists_WCFS1, col=Color, main="RNASeqCounts WCFS1",trace="none", margins = c(10,12), cexRow=0.5, cexCol=0.5)
heatmap.2(sampleDists_NC8, col=Color, main="RNASeqCounts NC8",trace="none", margins = c(10,12), cexRow=0.5, cexCol=0.5)
#################Differential expression analysis########################
# remove genes with zero counts for all samples
dgeFull_WCFS1 <- DGEList(y_WCFS1$counts[apply(y_WCFS1$counts, 1, sum) != 0, ],
group=y_WCFS1$samples$group)
dgeFull_NC8 <- DGEList(y_NC8$counts[apply(y_NC8$counts, 1, sum) != 0, ],
group=y_NC8$samples$group)
# estimate the normalization factors
y_WCFS1 <- calcNormFactors(dgeFull_WCFS1, method="TMM") # 2:9
y_NC8 <- calcNormFactors(dgeFull_NC8, method="TMM") # 2:9
y_WCFS1$samples
y_NC8$samples
head(y_WCFS1$counts)
head(y_NC8$counts)
# From the normalization factors and the original count table, find the normalized counts and use the log2-transformation to inspect them with boxplots and a MDS.
# Normalized counts can be extracted from dgeFull using the function cpm:
eff.lib.size <- y_WCFS1$samples$lib.size*y_WCFS1$samples$norm.factors
normCounts_WCFS1 <- cpm(dgeFull_WCFS1)
eff.lib.size <- y_NC8$samples$lib.size*y_NC8$samples$norm.factors
normCounts_NC8 <- cpm(dgeFull_NC8)
# Plot
RNASeqNormCounts_WCFS1 <- log2(normCounts_WCFS1 + 1)
RNASeqNormCounts_NC8 <- log2(normCounts_NC8 + 1)
boxplot(RNASeqCounts_WCFS1, col="gray", las=3)
boxplot(RNASeqCounts_NC8, col="gray", las=3)
plotMDS(RNASeqNormCounts_WCFS1)
plotMDS(RNASeqNormCounts_NC8)
sampleDists_WCFS1 <- as.matrix(dist(t(RNASeqNormCounts_WCFS1)))
sampleDists_NC8 <- as.matrix(dist(t(RNASeqNormCounts_NC8)))
Color <- colorRampPalette(c("Yellow", "orange")) #set color
heatmap.2(sampleDists_WCFS1, col=Color, main="RNASeqCounts WCFS1",trace="none", margins = c(10,12), cexRow=0.5, cexCol=0.5)
heatmap.2(sampleDists_NC8, col=Color, main="RNASeqCounts NC8",trace="none", margins = c(10,12), cexRow=0.5, cexCol=0.5)
# Estimate common and tagwise dispersion
dgeFull_WCFS1 <- estimateCommonDisp(dgeFull_WCFS1)
dgeFull_WCFS1 <- estimateTagwiseDisp(dgeFull_WCFS1)
dgeTest_WCFS1 <- exactTest(dgeFull_WCFS1)
filtData_WCFS1 <- HTSFilter(dgeFull_WCFS1)$filteredData
# Perform an exact test for the difference in expression between the conditions
dgeTestFilt_WCFS1 <- exactTest(filtData_WCFS1)
dgeTestFilt_WCFS1
# plot an histogram of unadjusted p-values after filtering
hist(dgeTest_WCFS1$table[,"PValue"], breaks=50)
hist(dgeTestFilt_WCFS1$table[,"PValue"], breaks=50)
# extract a summary of the differential expression statistics
resNoFilt <- topTags(dgeTest_WCFS1, n=nrow(dgeTest_WCFS1$table)) # fout ondekt
head(resNoFilt)
resFilt <- topTags(dgeTestFilt_WCFS1, n=nrow(dgeTest_WCFS1$table)) # two subscripts required
head(resNoFilt)
# compare the number of differentially expressed genes with and without filtering (risk: 1%)
# before independent filtering
sum(resNoFilt$table$FDR < 0.01)
# after independent filtering
sum(resFilt$table$FDR < 0.01)
# extract and sort differentially expressed genes
sigDownReg <- resFilt$table[resFilt$table$FDR<0.01,]
sigDownReg <- sigDownReg[order(sigDownReg$logFC),]
sigUpReg <- sigDownReg[order(sigDownReg$logFC, decreasing=TRUE),]
head(sigUpReg)
# write the results in csv files
write.csv(sigDownReg, file="sigDownReg_WCFS1.csv")
write.csv(sigUpReg, file="sigUpReg_WCFS1.csv")
# create a MA plot with 1% differentially expressed genes
plotSmear(dgeTestFilt_WCFS1,
de.tags = rownames(resFilt$table)[which(resFilt$table$FDR<0.01)])
# create a Volcano plot
volcanoData <- cbind(resFilt$table$logFC, -log10(resFilt$table$FDR))
colnames(volcanoData) <- c("logFC", "negLogPval")
head(volcanoData)
plot(volcanoData, pch=19)
# transform the normalized counts in log-counts-per-million
y <- cpm(dgeFull_WCFS1, log=TRUE, prior.count = 1)
head(y)
# select 1% differentially expressed genes and produce a heatmap
selY <- y[rownames(resFilt$table)[resFilt$table$FDR<0.01 &
abs(resFilt$table$logFC)>1.5],]
head(selY)
# If you are interesting in the result of the gene clustering, it can be obtained from the previous command.
# More precisely, the result of HAC is stored into $ddc.
cimColor <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)[255:1]
finalHM <- cim(t(selY), color=cimColor, symkey=FALSE)
plot(finalHM$ddc, leaflab="none")
abline(h=10, lwd=2, col="pink")
# Using this dendrogram, we might want to cut the tree at level h=10 (for instance),
# which can be performed using the function cutree, which will provide a cluster membership for each gene.
geneClust <- cutree(as.hclust(finalHM$ddc), h=10)
head(geneClust)
# For instance, the number of clusters is equal to
length(unique(geneClust))
# and the genes in cluster 1 are:
names(which(geneClust==1))
install.packages(c("RColorBrewer", "mixOmics", "VennDiagram", "gplots", "stringi", "rstudioapi"))
source("https://bioconductor.org/biocLite.R") # install bioconductor if not already installed
biocLite("HTSFilter")
install.packages(c("RColorBrewer", "mixOmics", "VennDiagram", "gplots", "stringi", "rstudioapi"))
ibrary(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages(c("Rcpp", "httpuv", "shiny"))
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
library(DBI)
library(HTSFilter)
library(mixOmics)
library(limma)
library(edgeR) # for DGEList
library(RColorBrewer)
library(MASS)
library(lattice)
library(ggplot2)
library(mixOmics)
library(gplots)
library(DBI)
library(HTSFilter)
library(mixOmics)
